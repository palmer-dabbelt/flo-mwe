set -e
set -x

if [[ "$TEST" == "" ]]
then
    TEST="test"
fi

# Skip some architectures as they're broken for specific tests
for arch in "$(echo $FAILING_ARCHES)"
do
    if [[ "$arch" == "$(uname -m)" ]]
    then
        exit 0
    fi
done

# Checks if we've been given a scala file, which means everything can
# be generated right from here.
if test -f $TEST.scala
then
    cat $TEST.scala

    scalac $TEST.scala -classpath chisel.jar:.

    scala -classpath chisel.jar:. $TEST \
        --debug --backend flo \
        || true

    touch $TEST.stdin
    while [[ "$(tail -n1 $TEST.stdin)" != "quit" ]]
    do
        scala -classpath chisel.jar:. $TEST \
            --debug --genHarness --compile --test --backend c \
            --vcd --dumpTestInput --testerSeed 0
    done

    mv $TEST.vcd gold.vcd
    mv $TEST-emulator.cpp harness.c++
    cat $TEST.flo
    mv $TEST.h $TEST-chisel.h
fi

# Perform the multi-word expansion
cat $TEST.flo
mv $TEST.flo $TEST-wide.flo
$PTEST_BINARY --width 32 --depth 1024 \
    --input $TEST-wide.flo --output $TEST-nocanon.flo
cat $TEST-nocanon.flo

# Pass the generated Flo file through flo-canon to make sure it's
# canonical
flo-canon $TEST-nocanon.flo > $TEST.flo
cat $TEST.flo

# Builds a software emulator
time flo-llvm $TEST.flo

# Builds the test harness that was generated by Scala
time clang -g -c -std=c++11 harness.c++ -o harness.o
#cat harness.llvm

# Links together the two output files from above
time clang++ -g $TEST.o harness.o -o opt

# Attempts a run of the code
if test -f $TEST.stdin
then
    cp $TEST.stdin $TEST.stdin.copy
    cat $TEST.stdin.copy
    time cat $TEST.stdin.copy | ./opt
else
    time ./opt --vcd $TEST.vcd --cycles 100
fi
cat $TEST.vcd

# Ensures that the two VCD files are actually the same.  Note that
# this allows extra signals to exist in the test file, but at least
# every signal from the gold file must exist.
time vcddiff gold.vcd $TEST.vcd
